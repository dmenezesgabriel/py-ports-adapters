# Define the user that will own and run the Nginx server
user nginx;
# Define the number of worker processes; recommended value is the number of
# cores that are being used by your server
worker_processes  1;

# Define the location on the file system of the error log, plus the minimum
# severity to log messages for
error_log  /var/log/nginx/error.log warn;
# Define the file that will store the process ID of the main NGINX process
pid        /var/run/nginx.pid;

# events block defines the parameters that affect connection processing.
events {
# Define the maximum number of simultaneous connections that can be opened by a worker process
worker_connections  1024;
}

# http block defines the parameters for how NGINX should handle HTTP web traffic
http {
    # Include the file defining the list of file types that are supported by NGINX
    include       /etc/nginx/mime.types;
    # Define the default file type that is returned to the user
    default_type  application/json;

    # Define the format of log messages.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    # Define the location of the log of access attempts to NGINX
    access_log  /var/log/nginx/access.log  main;

    # Define the parameters to optimize the delivery of static content
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay    on;

    # Define the timeout value for keep-alive connections with the client
    keepalive_timeout  65;

    # Define the usage of the gzip compression algorithm to reduce the amount of data to transmit
    #gzip  on;

    # Include additional parameters for virtual host(s)/server(s)
    include /etc/nginx/conf.d/*.conf;

    # Define the parameters for a specific virtual host/server
    server {
        # Define the server name, IP address, and/or port of the server
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost;
        ssl_certificate /root/ssl/cert.pem;
        ssl_certificate_key /root/ssl/key.pem;

        # Configure NGINX to reverse proxy HTTPS requests to the upstream server (Gunicorn/Uvicorn (WSGI/ASGI server))
        location / {
            proxy_pass http://api:8000;            # Redefine the header fields that NGINX sends to the upstream server
            # Redefine the header fields that NGINX sends to the upstream server
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;

            # Define the maximum file size on file uploads
            # client_max_body_size 5M;
        }

        error_page   500 502 503 504  /50x.html;

    }
}
